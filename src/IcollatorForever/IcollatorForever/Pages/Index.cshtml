<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the FileSharper distribution or repository for the
full text of the license.
-->

@page "/"

<div id="inputContainer">
    <div><input id="mainFileInput" class="fileInput" type="file" accept="image/x-icon" multiple /></div>
    <div>
        <label id="chooseFileLabel" class="fileInputLabel btn btn-primary" for="mainFileInput">Add File(s)...</label>
    </div>
</div>
<div id="iconTableContainer">
    @if (_entries.Count > 0)
    {
        <table>
            <thead>
                <tr>
                    <th>XOR Image</th>
                    <th>AND Image</th>
                    <th>Source File Name</th>
                    <th>Source Index</th>
                    <th>Width</th>
                    <th>Height</th>
                    <th>Bit Count</th>
                    <th>Color Count</th>
                    <th>Size in Bytes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (IIconEntry entry in _entries)
                {
                    IconEntryDescription description = entry.Description;
                <tr>
                    @if (entry.HasAndImage)
                    {
                        <td><img src="data:image/jpeg;base64,@(entry.XorImage.ToBase64JpegString())" /></td>
                        <td><img src="data:image/jpeg;base64,@(entry.AndImage.ToBase64JpegString())" /></td>
                    }
                    else
                    {
                        <td colspan="2"><img src="data:image/jpeg;base64,@(entry.XorImage.ToBase64JpegString())" title="PNGs are supported but not displayed" /></td>
                    }
                    <td>@description.SourceFileName</td>
                    <td>@description.SourceIndex</td>
                    <td>@description.Width</td>
                    <td>@description.Height</td>
                    <td>@description.BitCount</td>
                    <td>@description.ColorCount</td>
                    <td>@description.SizeInBytes</td>
                </tr>
                }
            </tbody>
        </table>
    }
    @foreach (Exception ex in _exceptions)
    {
        <p>@ex.ToString()</p>
    }
</div>

<div id="saveIconButtonContainer">
    @if (_entries.Count > 0)
    {
        <button class="btn btn-primary" onclick="@SaveFileCall">Save to .ico</button>
    }
</div>


@functions {
        static Index _instance;

        string _icoBase64 = string.Empty;

        List<IIconEntry> _entries = new List<IIconEntry>();

        List<Exception> _exceptions = new List<Exception>();

    string SaveFileCall => "saveFile('" + _icoBase64 + "')";

    [JSInvokable("AddFile")]
    public static void AddFile(string filename, string base64contents)
    {
        _instance.TryAddFile(filename, base64contents);
    }

    private void TryAddFile(string filename, string base64contents)
    {
        byte[] contents = Convert.FromBase64String(base64contents);
        try
        {
            using (MemoryStream stream = new MemoryStream(contents))
            {
                Icon icon = new Icon(filename, stream);
                _entries.AddRange(icon.Entries);
            }
            //System.out.println("on file " + i);
        }
        catch (Exception e)
        {
            _exceptions.Add(e);
        }
        _entries = _entries.OrderBy(e => e.Description).ToList();
        using (MemoryStream stream = new MemoryStream())
        {
            IconUtils.WriteToStream(_entries, stream);
            _icoBase64 = Convert.ToBase64String(stream.GetBuffer());
        }
        StateHasChanged();
    }

    protected override void OnInit()
    {
        _instance = this;
        base.OnInit();
    }
}