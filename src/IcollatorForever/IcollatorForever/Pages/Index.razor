@page "/"
@inject IJSRuntime JSRuntime;
@using System.Linq;
@using System.Threading;
@using System.IO;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.PixelFormats;
@using SixLabors.ImageSharp.Processing;

<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the IcollatorForever distribution or repository for the
full text of the license.
-->

@if (!_showingImageOptions)
{
    <div id="inputContainer">
        <div><input id="mainFileInput" class="fileInput" type="file" accept="image/x-icon|image/gif|image/jpeg|image/bmp" multiple /></div>
        <div class="topButtons">
            <label id="chooseFileLabel" class="fileInputLabel btn btn-primary" for="mainFileInput">Add File(s)...</label>
            <button id="clearButton" class="btn btn-outline-primary" onclick="clearTable()" disabled=@NoEntries>Clear</button>
            <button id="saveButton" class="btn btn-primary" onclick="saveFile()" disabled=@NoEntries>Save to .ico</button>
        </div>
    </div>
    <div id="iconTableContainer" ondrop="handleDrop(event); return false;" ondragover="return handleDragOver(event);"
         ondragenter="return handleDragEnter(event);" ondragleave="return handleDragLeave(event);">
        @if (_entries.Count == 0)
        {
            <div id="dropTarget">Drag and drop files here to add them to your icon.</div>
        }
        @if (_entries.Count > 0)
        {
            <table>
                <thead>
                    <tr>
                        <th>XOR Image</th>
                        <th>AND Image</th>
                        <th>Source File Name</th>
                        <th>Source Index</th>
                        <th>Width</th>
                        <th>Height</th>
                        <th>Bit Count</th>
                        <th>Color Count</th>
                        <th>Size in Bytes</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < _entries.Count; i++)
                    {
                        IIconEntry entry = _entries[i];
                        IconEntryDescription description = entry.Description;
                        string key = description.ToKey();
                        <tr @key="@key" onclick="select(elementIndex(this))" class="@(entry == _selectedEntry ? "selected" : "")">
                            @if (entry.HasAndImage)
                            {
                                <td><img src="@entry.XorDataUrl" /></td>
                                <td><img src="@entry.AndDataUrl" /></td>
                            }
                            else
                            {
                                <td colspan="2"><img src="@entry.XorDataUrl" title="PNGs are supported but not displayed" /></td>
                            }
                            <td>@description.SourceFileName</td>
                            <td>@description.SourceIndex</td>
                            <td>@description.Width</td>
                            <td>@description.Height</td>
                            <td>@description.BitCount</td>
                            <td>@description.ColorCount</td>
                            <td>@description.SizeInBytes</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        @foreach (Exception ex in _exceptions)
        {
            <p>@ex.ToString()</p>
        }
    </div>
    <div id="selectedEntryActions" class='bottomButtons @(NoSelection ? "" : "entrySelected")'>
        <button id="deleteButton" class="btn btn-primary" onclick="deleteSelected()" disabled=@NoSelection>Delete</button>
    </div>
    <div id="loadingFileOverlay">
        <div>Loading @(_currentLoadingFilename)...</div>
        <img src="images/Spinner-1s-200px.gif" />
    </div>
}
@if (_showingImageOptions)
{
    <div id="genericImageOptions">
        <h2>@(_currentLoadingFilename ?? "Image")</h2>
        Check the box for each combination of size and color count you want to generate from @(_currentLoadingFilename ?? "the image").
        Then click "Generate Entries" to add them to your icon.
        (Note: This will freeze your browser for a ridiculous amount of time.
        The Blazor team promises improved performance as the Mono .NET interpreter is optimized.)
        <div id="optionsPreviewAndTable">
            <img id="optionsImagePreview" src="@_optionsImageDataUrl" />
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>All</th>
                        <th>Black &amp;<br />White</th>
                        <th>16 Colors</th>
                        <th>256 Colors</th>
                        <th>Full Color</th>
                        @if (_optionsImageHasTransparency)
                        {
                            <th>Full Color +<br />Transparency</th>
                        }
                    </tr>
                    <tr>
                        <th>All</th>
                        <td><input type="checkbox" checked="@AllSelected" @onclick="@ToggleAll" /></td>
                        <td><input type="checkbox" checked="@(AreAllSizesSelected(1))" @onclick="@(() => ToggleBitDepthColumn(1) )" /></td>
                        <td><input type="checkbox" checked="@(AreAllSizesSelected(4))" @onclick="@(() => ToggleBitDepthColumn(4) )" /></td>
                        <td><input type="checkbox" checked="@(AreAllSizesSelected(8))" @onclick="@(() => ToggleBitDepthColumn(8) )" /></td>
                        <td><input type="checkbox" checked="@(AreAllSizesSelected(24))" @onclick="@(() => ToggleBitDepthColumn(24) )" /></td>
                        @if (_optionsImageHasTransparency)
                        {
                            <td><input type="checkbox" checked="@(AreAllSizesSelected(32))" @onclick="@(() => ToggleBitDepthColumn(32) )" /></td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (int size in _sizes)
                    {
                        if (size <= MaxSize)
                        {
                            int localSize = size;
                            <tr>
                                <th>@(size)x@(size) pixels</th>
                                <td><input type="checkbox" checked="@AreAllBitDepthsSelected(localSize)" @onclick="@(() => ToggleSizeRow(localSize))" /></td>
                                <td><input type="checkbox" checked="@IsTypeSelected(localSize, 1)" @onclick="@(() => ToggleTypeSelection(localSize, 1))" /></td>
                                <td><input type="checkbox" checked="@IsTypeSelected(localSize, 4)" @onclick="@(() => ToggleTypeSelection(localSize, 4))" /></td>
                                <td><input type="checkbox" checked="@IsTypeSelected(localSize, 8)" @onclick="@(() => ToggleTypeSelection(localSize, 8))" /></td>
                                <td><input type="checkbox" checked="@IsTypeSelected(localSize, 24)" @onclick="@(() => ToggleTypeSelection(localSize, 24))" /></td>
                                @if (_optionsImageHasTransparency)
                                {
                                    <td><input type="checkbox" checked="@IsTypeSelected(localSize, 32)" @onclick="@(() => ToggleTypeSelection(localSize, 32))" /></td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div id="dataFormatOptions">
            <h4>Internal data format for generated entries:</h4>
            <label for="bmpRadio"><input type="radio" name="format" id="bmpRadio" value="bmp" checked="@(!_generateAsPng)" @onchange="@(() => _generateAsPng = false)" /> <strong>BMP</strong> (more compatible)</label> <br />
            <label for="pngRadio"><input type="radio" name="format" id="pngRadio" value="png" checked="@(_generateAsPng)" @onchange="@(() => _generateAsPng = true)" disabled="disabled" /> <strong>PNG</strong> (smaller files, currently broken)</label>
        </div>
        <button id="generateButton" class="btn btn-primary" @onclick="@GenerateEntries">Generate Entries</button>
        <button id="skipCancelImageButton" class="btn btn-outline-primary" @onclick="@SkipCancel">Skip/Cancel</button>
    </div>

    <div id="generatingEntriesOverlay" class="@(_generatingEntries ? "generatingEntries" : "")">
        <div>Generating entries from @(_currentLoadingFilename)...</div>
        <img src="images/Spinner-1s-200px.gif" />
        <div>@(_currentEntryGenerationDescription)</div>
    </div>
}


@code {

int[] _bitDepths = new int[] { 1, 4, 8, 24, 32 };

int[] _sizes = new int[] { 16, 24, 32, 48, 64, 128, 256 };

IIconEntry _selectedEntry;

bool NoEntries => _entries.Count == 0;

bool NoSelection => _selectedEntry == null;

byte[] _currentFileContents;

Timer _timer;

List<IIconEntry> _entries = new List<IIconEntry>();

List<Exception> _exceptions = new List<Exception>();

bool _showingImageOptions = false;

TaskCompletionSource<bool> _generatingEntriesCompletionSource;

HashSet<Tuple<int, int>> _selectedTypes = new HashSet<Tuple<int, int>>();

Image<Rgba32> _optionsImage;

string _currentEntryGenerationDescription;

bool _optionsImageHasTransparency;

string _optionsImageDataUrl;

string _currentLoadingFilename;

bool _generatingEntries;

bool _generateAsPng;

int MaxSize
{
    get
    {
        if (_optionsImage == null)
        {
            return 256;
        }
        int minDimension = Math.Min(_optionsImage.Height, _optionsImage.Width);
        return Math.Min(256, minDimension);
    }
}

IEnumerable<int> Sizes
{
    get
    {
        int max = MaxSize;
        foreach (int size in _sizes)
        {
            if (size <= max)
            {
                yield return size;
            }
        }
    }
}

IEnumerable<int> BitDepths
{
    get
    {
        foreach (int bitDepth in _bitDepths)
        {
            if (_optionsImageHasTransparency || bitDepth < 32)
            {
                yield return bitDepth;
            }
        }
    }
}

bool AllSelected
{
    get
    {
        foreach (int bitDepth in BitDepths)
        {
            if (!AreAllSizesSelected(bitDepth))
            {
                return false;
            }
        }
        return true;
    }
}

private async Task<bool> GenerateFromImageOptionsAsync(string filename, byte[] bytes)
{
    _generatingEntriesCompletionSource = new TaskCompletionSource<bool>();
    _showingImageOptions = true;
    Console.WriteLine("marking state changed");
    StateHasChanged();
    bool success = await _generatingEntriesCompletionSource.Task;
    _showingImageOptions = false;
    _generatingEntriesCompletionSource = null;
    _optionsImage = null;
    _optionsImageDataUrl = null;
    _currentLoadingFilename = null;
    StateHasChanged();
    return await Task.FromResult(success);
}

[JSInvokable("AddFileAsync")]
public async Task<bool> AddFileAsync(string filename, string base64contents)
{
    byte[] fileBytes = Convert.FromBase64String(base64contents);

    string extension = System.IO.Path.GetExtension(filename).ToLower();

    _currentLoadingFilename = filename;

    StateHasChanged();

    await Task.Delay(10);

    bool success = false;

    if (extension == null || extension.Length == 0 || extension == ".ico")
    {
        success = TryAddIcoFile(filename, fileBytes);
    }
    if (success)
    {
        StateHasChanged();
        return await Task.FromResult(true);
    }
    else
    {
        try
        {
            Console.WriteLine("Loading image");
            _selectedTypes.Clear();
            StateHasChanged();
            _optionsImage = Image.Load<Rgba32>(fileBytes);
            _optionsImageHasTransparency = _optionsImage.HasTransparency();
            _generateAsPng = false;
            _optionsImageDataUrl = "data:image/jpeg;base64," + _optionsImage.ToBase64JpegString();
            return await GenerateFromImageOptionsAsync(filename, fileBytes);
        }
        catch (Exception ex)
        {
            Console.WriteLine("exception loading image: " + ex.ToString());
            _currentLoadingFilename = null;
            _optionsImage = null;
            _showingImageOptions = false;
            _generatingEntriesCompletionSource = null;
            _generatingEntriesCompletionSource?.SetResult(false);
            StateHasChanged();
            return false;
        }
    }
}

private bool TryAddIcoFile(string filename, byte[] bytes)
{
    try
    {
        using (MemoryStream stream = new MemoryStream(bytes))
        {
            Icon icon = new Icon(filename, stream);
            _entries.AddRange(icon.Entries);
            _entries = _entries.OrderBy(e => e.Description).ToList();
            StateHasChanged();
        }
        return true;
    }
    catch (Exception e)
    {
        _exceptions.Add(e);
        StateHasChanged();
    }
    return false;
}

private bool IsTypeSelected(int size, int bitDepth)
{
    return _selectedTypes.Contains(new Tuple<int, int>
    (size, bitDepth));
}

private bool AreAllBitDepthsSelected(int size)
{
    foreach (int bitDepth in BitDepths)
    {
        if (!IsTypeSelected(size, bitDepth))
        {
            return false;
        }
    }
    return true;
}

private bool AreAllSizesSelected(int bitDepth)
{
    foreach (int size in Sizes)
    {
        if (!IsTypeSelected(size, bitDepth))
        {
            return false;
        }
    }
    return true;
}

private void SetTypeSelected(int size, int bitDepth, bool selected)
{
    var type = new Tuple<int, int>(size, bitDepth);
    if (selected)
    {
        _selectedTypes.Add(type);
    }
    else
    {
        _selectedTypes.Remove(type);
    }
}

private void ToggleTypeSelection(int size, int bitDepth)
{
    Tuple<int, int> type = new Tuple<int, int>(size, bitDepth);
    if (_selectedTypes.Contains(type))
    {
        _selectedTypes.Remove(type);
    }
    else
    {
        _selectedTypes.Add(type);
    }
    StateHasChanged();
}

private void ToggleBitDepthColumn(int bitDepth)
{
    bool allSelected = AreAllSizesSelected(bitDepth);
    foreach (int size in Sizes)
    {
        SetTypeSelected(size, bitDepth, !allSelected);
    }
    StateHasChanged();
}

private void ToggleSizeRow(int size)
{
    bool allSelected = AreAllBitDepthsSelected(size);
    foreach (int bitDepth in BitDepths)
    {
        SetTypeSelected(size, bitDepth, !allSelected);
    }
    StateHasChanged();
}

private void ToggleAll()
{
    bool allSelected = AllSelected;
    foreach (int bitDepth in BitDepths)
    {
        foreach (int size in Sizes)
        {
            SetTypeSelected(size, bitDepth, !allSelected);
        }
    }
    StateHasChanged();
}

private async void GenerateEntries()
{
    int index = 0;
    _generatingEntries = true;
    foreach (int size in Sizes)
    {
        int smallestDimension = Math.Min(_optionsImage.Width, _optionsImage.Height);
        Image<Rgba32> baseImage = _optionsImage.Clone(x => x.Crop(smallestDimension, smallestDimension).Resize(size, size));
        var bitDepths = _selectedTypes.Where(t => t.Item1 == size).Select(t => t.Item2).Distinct().OrderByDescending(x => x);
        foreach (int bitDepth in bitDepths)
        {
            if (!_generatingEntries)
            {
                break;
            }
            IconEntryDescription description = new IconEntryDescription(
                    size, size, 0, 0, 1, bitDepth, -1, 0, _currentLoadingFilename, index++);
            _currentEntryGenerationDescription = $"Generating {size}x{size}, {GetNumberOfColorString(bitDepth)}";
            StateHasChanged();
            await Task.Delay(10);
            _entries.Add(baseImage.ToIcoIconEntry(description));
        }
        if (!_generatingEntries)
        {
            break;
        }
    }
    _generatingEntries = false;
    Console.WriteLine("Generated Entries!");
    _generatingEntriesCompletionSource.SetResult(true);
    _showingImageOptions = false;
    _entries = _entries.OrderBy(e => e.Description).ToList();
    StateHasChanged();
}

private string GetNumberOfColorString(int bitDepth)
{
    if (bitDepth == 1)
    {
        return "Black & White";
    }
    else if (bitDepth == 24)
    {
        return "Full Color";
    }
    else if (bitDepth == 32)
    {
        return "Full Color + Transparency";
    }
    else
    {
        return (1 << bitDepth) + " Colors";
    }
}

private void SkipCancel()
{
    _generatingEntriesCompletionSource.SetResult(false);
    _showingImageOptions = false;
    StateHasChanged();
}

[JSInvokable("GenerateBase64IcoString")]
public string GenerateBase64IcoString()
{
    if (_entries.Count > 0)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            IconUtils.WriteToStream(_entries, stream);
            return Convert.ToBase64String(stream.ToArray());
        }
    }
    return null;
}

[JSInvokable("Clear")]
public void Clear()
{
    _entries.Clear();
    _selectedEntry = null;
    StateHasChanged();
}

[JSInvokable("DeleteSelected")]
public void DeleteSelected()
{
    if (_selectedEntry != null)
    {
        _entries.Remove(_selectedEntry);
        _selectedEntry = null;
        StateHasChanged();
    }
}

[JSInvokable("Select")]
public void Select(int index)
{
    if (index > -1 && index < _entries.Count)
    {
        IIconEntry entry = _entries[index];
        if (entry == _selectedEntry)
        {
            _selectedEntry = null;
        }
        else
        {
            _selectedEntry = entry;
        }
    }
    StateHasChanged();
}

protected override void OnInit()
{
    JSRuntime.InvokeAsync<object>("setDotNetIndexInstance", DotNetObjectRef.Create(this));
    base.OnInit();
}
}
